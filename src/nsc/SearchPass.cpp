/*******************************************************************************

			NES Sound Driver & Library	(NSD.lib)	MML Compiler

	Copyright (c) 2012 A.Watanabe (S.W.), All rights reserved.
	 For conditions of distribution and use, see copyright notice in "nsc.cpp".

*******************************************************************************/

#include "StdAfx.h"
#include "SearchPass.h"

//==============================================================
//		コンストラクタ
//--------------------------------------------------------------
//	●引数
//					無し
//	●返値
//					無し
//==============================================================
SearchPass::SearchPass(void):
	m_count(0)
{
	
}

//==============================================================
//		コンストラクタ
//--------------------------------------------------------------
//	●引数
//					無し
//	●返値
//					無し
//==============================================================
SearchPass::~SearchPass(void)
{
	clear();
}

//==============================================================
//		登録の全クリア
//--------------------------------------------------------------
//	●引数
//					無し
//	●返値
//					無し
//==============================================================
void		SearchPass::clear()
{
	//----------------------
	//Delete Class

	//検索パスを全部解放する。
	for(map<size_t,string>::iterator it=m_ptcPass.begin(), e=m_ptcPass.end(); it!=e; ++it){
		it->second.clear();
	}
	m_ptcPass.clear();
	m_count	= 0;
}

//==============================================================
//		デバッグ用出力
//--------------------------------------------------------------
//	●引数
//					無し
//	●返値
//					無し
//==============================================================
void		SearchPass::debug()
{
	//----------------------
	//Delete Class

	//検索パスの一覧出力
	for(map<size_t,string>::iterator it=m_ptcPass.begin(), e=m_ptcPass.end(); it!=e; ++it){
		cout << it->second << endl;
	}
}

//==============================================================
//		登録を１つ追加（末尾に/か\が無い場合、自動で付与する）
//--------------------------------------------------------------
//	●引数
//		string*	_str	登録する検索パス
//	●返値
//					無し
//==============================================================
void		SearchPass::add_one(string* _str)
{
	size_t	i	= _str->size();
	char	c;

	if(_str->empty() == false){
		c = (*_str)[i-1];
		if((c != '/') && (c != '\\')){
			(*_str) += "/";
		}
		m_ptcPass[m_count].assign(*_str);
		m_count++;
		_str->clear();
	}
}

//==============================================================
//		登録の追加 with ";"による複数登録対応
//--------------------------------------------------------------
//	●引数
//		char*	_str	登録する検索パス	';'で区切れば、複数登録
//	●返値
//					無し
//==============================================================
void		SearchPass::add(char*	_str)
{
	//----------------------
	//Local変数
	size_t	i = 0;
	string	strTemp;

	if(_str != NULL){
		strTemp.clear();

		while(_str[i] != 0){
			switch(_str[i]){
				case(_PATH_SPLIT):
					add_one(&strTemp);
					break;
				default:
					strTemp	+= _str[i];
					break;
			}
			i++;
		}
		add_one(&strTemp);
	}
}

//==============================================================
//		登録の追加 with ";"による複数登録対応
//--------------------------------------------------------------
//	●引数
//		string*	_str	登録する検索パス	';'で区切れば、複数登録
//	●返値
//					無し
//==============================================================
void		SearchPass::add(string*	_str)
{

	//----------------------
	//Local変数
	size_t	i = 0;
	string	strTemp;

	strTemp.clear();
	_str->append(1, _PATH_SPLIT);

	while(i < _str->size()){
		switch((*_str)[i]){
			case(_PATH_SPLIT):
				add_one(&strTemp);
				break;
			default:
				strTemp	+= (*_str)[i];
				break;
		}
		i++;
	}
}

//==============================================================
//		検索パスの取得
//--------------------------------------------------------------
//	●引数
//		size_t id		登録番号
//		string*			検索パス
//	●返値
//		int				0			正常
//						それ以外	異常
//==============================================================
const char*	SearchPass::get(size_t id)
{
	return(m_ptcPass[id].c_str());
}
